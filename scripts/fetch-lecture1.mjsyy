// scripts/fetch-lecture1.mjs
// Fetch the ReadTheDocs page, keep/convert YouTube embeds, sanitize,
// restyle, and write public/lecture1.html

import fs from "node:fs";
import path from "node:path";
import { fileURLToPath } from "node:url";
import * as cheerio from "cheerio";

// === CONFIG ===
const LEC1_URL = 
"https://tinyml-readthedocs.readthedocs.io/en/latest/module1/Lecture1.html";
const OUT_DIR = "public";
const OUT_FILE = "lecture1.html";

// Helpers
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const outPath = path.resolve(__dirname, "..", OUT_DIR, OUT_FILE);

function absUrl(href) {
  try { return new URL(href, LEC1_URL).toString(); } catch { return href; 
}
}

// Extract a YouTube video ID from common URL shapes
function getYouTubeId(url) {
  try {
    const u = new URL(url);
    if (u.hostname.includes("youtu.be")) return u.pathname.slice(1);
    if (u.hostname.includes("youtube.com")) {
      if (u.pathname === "/watch") return u.searchParams.get("v");
      const m = u.pathname.match(/\/embed\/([^/?#]+)/);
      if (m) return m[1];
    }
  } catch {}
  return null;
}

// Cheerio-friendly attribute allowlist helper
function allowAttrs($el, allowed) {
  const attrs = $el.attr() || {};
  for (const name of Object.keys(attrs)) {
    if (!allowed.has(name.toLowerCase())) $el.removeAttr(name);
  }
}

(async function run() {
  console.log("Fetching:", LEC1_URL);
  const res = await fetch(LEC1_URL, { redirect: "follow" });
  if (!res.ok) throw new Error(`Fetch failed: ${res.status}`);
  const html = await res.text();

  const $ = cheerio.load(html);

  // Pick the main content block
  let $main = $('div[role="main"] .document').first();
  if (!$main.length) $main = $('div[role="main"]').first();
  if (!$main.length) $main = $("#main-content").first();
  if (!$main.length) $main = $("article").first();
  if (!$main.length) $main = $("body");

  // Remove obvious layout/noise (this must be ONE line)
  $main.find("script, style, nav, header, footer, .sphinxsidebar, 
.wy-nav-side, .toc, .related").remove();

  // Rewrite relative URLs
  $main.find("a[href]").each((_, a) => $(a).attr("href", 
absUrl($(a).attr("href"))));
  $main.find("img[src]").each((_, i) => $(i).attr("src", 
absUrl($(i).attr("src"))));
  $main.find("iframe[src]").each((_, f) => $(f).attr("src", 
absUrl($(f).attr("src"))));

  // ▶️ Convert any YouTube links to embedded players
  $main.find('a[href*="youtube.com/watch"], 
a[href*="youtu.be/"]').each((_, a) => {
    const $a = $(a);
    const id = getYouTubeId($a.attr("href"));
    if (!id) return;
    const $outer = $('<div class="my-4 overflow-hidden rounded-xl border 
border-black/10 dark:border-white/10"></div>');
    const $ratio = $('<div class="relative w-full" 
style="padding-top:56.25%"></div>');
    const $iframe = $(
      `<iframe class="absolute inset-0 w-full h-full"
         src="https://www.youtube.com/embed/${id}"
         loading="lazy"
         referrerpolicy="strict-origin-when-cross-origin"
         allow="accelerometer; autoplay; clipboard-write; encrypted-media; 
gyroscope; picture-in-picture; web-share"
         allowfullscreen></iframe>`
    );
    $ratio.append($iframe);
    $outer.append($ratio);
    $a.after($outer);
  });

  // Allowlist tags/attributes (keep <iframe>)
  const ALLOW_TAGS = new Set([
    "section","article","p","br","strong","b","em","u","s","span",
    "h1","h2","h3","h4","h5","h6","ul","ol","li","a","img","blockquote",
    
"hr","table","thead","tbody","tr","th","td","pre","code","figure","figcaption",
    "div","iframe"
  ]);
  const ALLOW_ATTRS = new Set([
    "href","src","alt","title","colspan","rowspan",
    
"width","height","frameborder","allow","allowfullscreen","loading","referrerpolicy","class","style"
  ]);

  // Unwrap anything not in allowlist; clean attributes
  $main.find("*").each((_, el) => {
    const $el = $(el);
    const tag = String(el.tagName || el.name || "").toLowerCase();
    if (!ALLOW_TAGS.has(tag)) { $el.replaceWith($el.contents()); return; }
    allowAttrs($el, ALLOW_ATTRS);
  });

  // Make any pre-existing iframes responsive as well
  $main.find("iframe[src]").each((_, f) => {
    const $f = $(f);
    if ($f.parents('[style*="padding-top:56.25%"]').length) return;
    $f.removeAttr("width").removeAttr("height")
      .attr("loading", $f.attr("loading") || "lazy")
      .attr("referrerpolicy", $f.attr("referrerpolicy") || 
"strict-origin-when-cross-origin")
      .attr("allow", $f.attr("allow") || "accelerometer; autoplay; 
clipboard-write; encrypted-media; gyroscope; picture-in-picture; 
web-share")
      .attr("allowfullscreen", "")
      .addClass("absolute inset-0 w-full h-full");
    const $outer = $('<div class="my-4 overflow-hidden rounded-xl border 
border-black/10 dark:border-white/10"></div>');
    const $ratio = $('<div class="relative w-full" 
style="padding-top:56.25%"></div>');
    $f.wrap($ratio);
    $f.parent().wrap($outer);
  });

  // Tailwind classes for readable theme
  $main.find("h1").addClass("text-3xl font-semibold mt-6 mb-3 
text-slate-900 dark:text-white");
  $main.find("h2").addClass("text-2xl font-semibold mt-6 mb-3 
text-slate-900 dark:text-white");
  $main.find("h3").addClass("text-xl font-bold mt-5 mb-2.5 text-slate-900 
dark:text-white");
  $main.find("h4,h5,h6").addClass("text-lg font-semibold mt-4 mb-2 
text-slate-900 dark:text-white");

  $main.find("p,li,figcaption").each((_, el) => {
    const $el = $(el);
    $el.addClass("text-[15px] leading-7 text-slate-800 
dark:text-white/90");
    if ((el.tagName || el.name || "").toLowerCase() === "p") 
$el.addClass("my-3");
  });

  $main.find("ul").addClass("list-disc pl-6 my-3 space-y-1");
  $main.find("ol").addClass("list-decimal pl-6 my-3 space-y-1");

  $main.find("a[href]").each((_, a) =>
    $(a).attr("target","_blank").attr("rel","noreferrer")
        .addClass("underline decoration-slate-400/50 underline-offset-2 
hover:text-slate-900 dark:decoration-white/40 dark:hover:text-white")
  );

  $main.find("img[src]").addClass("max-w-full h-auto rounded-xl border 
border-black/10 dark:border-white/10 my-3");
  $main.find("code").addClass("px-1.5 py-0.5 rounded bg-black/5 
dark:bg-white/10");
  $main.find("pre").addClass("my-4 p-3 rounded-xl overflow-auto bg-black/5 
dark:bg-white/10");

  $main.find("table").each((_, t) => {
    const $t = $(t);
    $t.addClass("w-full text-sm border-collapse");
    $t.find("th").addClass("text-left font-semibold px-3 py-2 bg-black/5 
dark:bg-white/10 text-slate-800 dark:text-white");
    $t.find("td").addClass("px-3 py-2 align-top text-slate-800 
dark:text-white/90 border-t border-black/10 dark:border-white/10");
    $t.wrap('<div class="overflow-x-auto rounded-xl border border-black/10 
dark:border-white/10 my-4"></div>');
  });

  fs.mkdirSync(path.dirname(outPath), { recursive: true });
  fs.writeFileSync(outPath, $main.html() || "", "utf8");
  console.log("Wrote:", outPath);
})().catch((e) => { console.error(e); process.exit(1); });


